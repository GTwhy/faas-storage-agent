# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import faas_storage_agent_pb2 as faas__storage__agent__pb2


class faas_storage_agentStub(object):
    """Interface exported by the server
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create_ns = channel.unary_unary(
                '/faas_storage_agent.faas_storage_agent/create_ns',
                request_serializer=faas__storage__agent__pb2.ns_req.SerializeToString,
                response_deserializer=faas__storage__agent__pb2.ns_resp.FromString,
                )
        self.delete_ns = channel.unary_unary(
                '/faas_storage_agent.faas_storage_agent/delete_ns',
                request_serializer=faas__storage__agent__pb2.ns_req.SerializeToString,
                response_deserializer=faas__storage__agent__pb2.ns_resp.FromString,
                )
        self.connect_ns = channel.unary_unary(
                '/faas_storage_agent.faas_storage_agent/connect_ns',
                request_serializer=faas__storage__agent__pb2.ns_req.SerializeToString,
                response_deserializer=faas__storage__agent__pb2.ns_resp.FromString,
                )
        self.set = channel.unary_unary(
                '/faas_storage_agent.faas_storage_agent/set',
                request_serializer=faas__storage__agent__pb2.data_req.SerializeToString,
                response_deserializer=faas__storage__agent__pb2.data_resp.FromString,
                )
        self.get = channel.unary_unary(
                '/faas_storage_agent.faas_storage_agent/get',
                request_serializer=faas__storage__agent__pb2.data_req.SerializeToString,
                response_deserializer=faas__storage__agent__pb2.data_resp.FromString,
                )
        self.delete = channel.unary_unary(
                '/faas_storage_agent.faas_storage_agent/delete',
                request_serializer=faas__storage__agent__pb2.data_req.SerializeToString,
                response_deserializer=faas__storage__agent__pb2.data_resp.FromString,
                )
        self.exists = channel.unary_unary(
                '/faas_storage_agent.faas_storage_agent/exists',
                request_serializer=faas__storage__agent__pb2.data_req.SerializeToString,
                response_deserializer=faas__storage__agent__pb2.data_resp.FromString,
                )


class faas_storage_agentServicer(object):
    """Interface exported by the server
    """

    def create_ns(self, request, context):
        """Create a namespace.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_ns(self, request, context):
        """Delete a namespace.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def connect_ns(self, request, context):
        """Connect to a namespace.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def set(self, request, context):
        """Stores a key-value pair.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get(self, request, context):
        """Get the value according to the key.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete(self, request, context):
        """Delete the key-value pair.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def exists(self, request, context):
        """Query whether the key exists.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_faas_storage_agentServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create_ns': grpc.unary_unary_rpc_method_handler(
                    servicer.create_ns,
                    request_deserializer=faas__storage__agent__pb2.ns_req.FromString,
                    response_serializer=faas__storage__agent__pb2.ns_resp.SerializeToString,
            ),
            'delete_ns': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_ns,
                    request_deserializer=faas__storage__agent__pb2.ns_req.FromString,
                    response_serializer=faas__storage__agent__pb2.ns_resp.SerializeToString,
            ),
            'connect_ns': grpc.unary_unary_rpc_method_handler(
                    servicer.connect_ns,
                    request_deserializer=faas__storage__agent__pb2.ns_req.FromString,
                    response_serializer=faas__storage__agent__pb2.ns_resp.SerializeToString,
            ),
            'set': grpc.unary_unary_rpc_method_handler(
                    servicer.set,
                    request_deserializer=faas__storage__agent__pb2.data_req.FromString,
                    response_serializer=faas__storage__agent__pb2.data_resp.SerializeToString,
            ),
            'get': grpc.unary_unary_rpc_method_handler(
                    servicer.get,
                    request_deserializer=faas__storage__agent__pb2.data_req.FromString,
                    response_serializer=faas__storage__agent__pb2.data_resp.SerializeToString,
            ),
            'delete': grpc.unary_unary_rpc_method_handler(
                    servicer.delete,
                    request_deserializer=faas__storage__agent__pb2.data_req.FromString,
                    response_serializer=faas__storage__agent__pb2.data_resp.SerializeToString,
            ),
            'exists': grpc.unary_unary_rpc_method_handler(
                    servicer.exists,
                    request_deserializer=faas__storage__agent__pb2.data_req.FromString,
                    response_serializer=faas__storage__agent__pb2.data_resp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'faas_storage_agent.faas_storage_agent', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class faas_storage_agent(object):
    """Interface exported by the server
    """

    @staticmethod
    def create_ns(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/faas_storage_agent.faas_storage_agent/create_ns',
            faas__storage__agent__pb2.ns_req.SerializeToString,
            faas__storage__agent__pb2.ns_resp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_ns(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/faas_storage_agent.faas_storage_agent/delete_ns',
            faas__storage__agent__pb2.ns_req.SerializeToString,
            faas__storage__agent__pb2.ns_resp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def connect_ns(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/faas_storage_agent.faas_storage_agent/connect_ns',
            faas__storage__agent__pb2.ns_req.SerializeToString,
            faas__storage__agent__pb2.ns_resp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def set(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/faas_storage_agent.faas_storage_agent/set',
            faas__storage__agent__pb2.data_req.SerializeToString,
            faas__storage__agent__pb2.data_resp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/faas_storage_agent.faas_storage_agent/get',
            faas__storage__agent__pb2.data_req.SerializeToString,
            faas__storage__agent__pb2.data_resp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/faas_storage_agent.faas_storage_agent/delete',
            faas__storage__agent__pb2.data_req.SerializeToString,
            faas__storage__agent__pb2.data_resp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def exists(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/faas_storage_agent.faas_storage_agent/exists',
            faas__storage__agent__pb2.data_req.SerializeToString,
            faas__storage__agent__pb2.data_resp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
